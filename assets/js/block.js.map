{"version":3,"file":"block.js","mappings":"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","sources":["webpack://thrivedx-test-plugin/external window \"React\"","webpack://thrivedx-test-plugin/external window [\"wp\",\"blockEditor\"]","webpack://thrivedx-test-plugin/external window [\"wp\",\"blocks\"]","webpack://thrivedx-test-plugin/external window [\"wp\",\"components\"]","webpack://thrivedx-test-plugin/webpack/bootstrap","webpack://thrivedx-test-plugin/webpack/runtime/compat get default export","webpack://thrivedx-test-plugin/webpack/runtime/define property getters","webpack://thrivedx-test-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://thrivedx-test-plugin/webpack/runtime/make namespace object","webpack://thrivedx-test-plugin/./src/block.js"],"sourcesContent":["module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport { TextControl, DatePicker, Button } from '@wordpress/components';\nimport { MediaUpload, InspectorControls, useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType('thrivedx-test-plugin/custom-fields-block', {\n    title: 'Custom Fields Block',\n    icon: 'list-view',\n    category: 'design',\n    attributes: {\n        customText: {\n            type: 'string',\n            default: '',\n        },\n        customDate: {\n            type: 'string',\n            default: '',\n        },\n        customImage: {\n            type: 'string',\n            default: '',\n        },\n    },\n    edit: ({ attributes, setAttributes }) => {\n        const blockProps = useBlockProps();\n        const { customText, customDate, customImage } = attributes;\n\n        const onSelectImage = (media) => {\n            setAttributes({ customImage: media.url });\n        };\n\n        function formatDate(isoDateString) {\n            if (!isoDateString) return '';\n\n            const date = new Date(isoDateString);\n            const month = `${date.getMonth() + 1}`.padStart(2, '0'); // getMonth() is zero-based\n            const day = `${date.getDate()}`.padStart(2, '0');\n            const year = date.getFullYear();\n\n            return `${month}-${day}-${year}`;\n        }\n\n        return (\n            <div {...blockProps}>\n                <InspectorControls>\n                    <div className=\"flex flex-col p-6 w-full\">\n                        <TextControl\n                            label=\"Custom Text\"\n                            value={customText}\n                            onChange={(value) => setAttributes({ customText: value })}\n                        />\n                        <div className=\"mb-6\">\n                            <DatePicker\n                                currentDate={customDate}\n                                onChange={(newDate) => {\n                                    const formattedDate = formatDate(newDate);\n                                    setAttributes({ customDate: formattedDate });\n                                }}\n                            />\n                        </div>\n                        <div className=\"border rounded\">\n                            <MediaUpload\n                                onSelect={onSelectImage}\n                                allowedTypes={['image']}\n                                value={customImage}\n                                render={({ open }) => (\n                                    <Button onClick={open}>Choose Image</Button>\n                                )}\n                            />\n                        </div>\n                    </div>\n                </InspectorControls>\n                <div>\n                    <p>Custom Text: {customText}</p>\n                    <p>Custom Date: {customDate}</p>\n                    {customImage && <img src={customImage} alt=\"Custom\" />}\n                </div>\n            </div>\n        );\n    },\n    save: ({ attributes }) => {\n        const { customText, customDate, customImage } = attributes;\n        return (\n            <div>\n                <p>Custom Text: {customText}</p>\n                <p>Custom Date: {customDate}</p>\n                {customImage && <img src={customImage} alt=\"Custom\" />}\n            </div>\n        );\n    },\n});\n"],"names":["registerBlockType","TextControl","DatePicker","Button","MediaUpload","InspectorControls","useBlockProps","title","icon","category","attributes","customText","type","default","customDate","customImage","edit","setAttributes","blockProps","onSelectImage","media","url","formatDate","isoDateString","date","Date","month","getMonth","padStart","day","getDate","year","getFullYear","createElement","className","label","value","onChange","currentDate","newDate","formattedDate","onSelect","allowedTypes","render","open","onClick","src","alt","save"],"sourceRoot":""}